['jobs', 'reports', '__generated', 'from pygogol.core import Request\nfrom json import dumps\nfrom urllib.parse import quote\nfrom pygogol.apis.youtubereporting.v1.Defs import baseUrl\n\ndef get(\n    jobId, \n    reportId,\n    onBehalfOfContentOwner=None\n    ):\n    url = baseUrl + "v1/jobs/{jobId}/reports/{reportId}"\n    method = "GET"\n    queryParams = {\n        "onBehalfOfContentOwner": onBehalfOfContentOwner\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format(jobId, reportId) + (query if len(query) > 1 else ""),\n        {},\n        None\n    )\n\ndef list(\n    jobId,\n    createdAfter=None,\n    onBehalfOfContentOwner=None,\n    pageSize=None,\n    pageToken=None,\n    startTimeAtOrAfter=None,\n    startTimeBefore=None\n    ):\n    url = baseUrl + "v1/jobs/{jobId}/reports"\n    method = "GET"\n    queryParams = {\n        "createdAfter": createdAfter, \n        "onBehalfOfContentOwner": onBehalfOfContentOwner, \n        "pageSize": pageSize, \n        "pageToken": pageToken, \n        "startTimeAtOrAfter": startTimeAtOrAfter, \n        "startTimeBefore": startTimeBefore\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format(jobId) + (query if len(query) > 1 else ""),\n        {},\n        None\n    )']

['jobs', '__generated', 'from pygogol.core import Request\nfrom json import dumps\nfrom urllib.parse import quote\nfrom pygogol.apis.youtubereporting.v1.Defs import baseUrl\n\ndef create(\n    Job,\n    onBehalfOfContentOwner=None\n    ):\n    url = baseUrl + "v1/jobs"\n    method = "POST"\n    queryParams = {\n        "onBehalfOfContentOwner": onBehalfOfContentOwner\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format() + (query if len(query) > 1 else ""),\n        {"content-type": "application/json"},\n        dumps(Job)\n    )\n\ndef delete(\n    jobId,\n    onBehalfOfContentOwner=None\n    ):\n    url = baseUrl + "v1/jobs/{jobId}"\n    method = "DELETE"\n    queryParams = {\n        "onBehalfOfContentOwner": onBehalfOfContentOwner\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format(jobId) + (query if len(query) > 1 else ""),\n        {},\n        None\n    )\n\ndef get(\n    jobId,\n    onBehalfOfContentOwner=None\n    ):\n    url = baseUrl + "v1/jobs/{jobId}"\n    method = "GET"\n    queryParams = {\n        "onBehalfOfContentOwner": onBehalfOfContentOwner\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format(jobId) + (query if len(query) > 1 else ""),\n        {},\n        None\n    )\n\ndef list(\n    includeSystemManaged=None,\n    onBehalfOfContentOwner=None,\n    pageSize=None,\n    pageToken=None\n    ):\n    url = baseUrl + "v1/jobs"\n    method = "GET"\n    queryParams = {\n        "includeSystemManaged": includeSystemManaged, \n        "onBehalfOfContentOwner": onBehalfOfContentOwner, \n        "pageSize": pageSize, \n        "pageToken": pageToken\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format() + (query if len(query) > 1 else ""),\n        {},\n        None\n    )']

['media', '__generated', 'from pygogol.core import Request\nfrom json import dumps\nfrom urllib.parse import quote\nfrom pygogol.apis.youtubereporting.v1.Defs import baseUrl\n\ndef download(\n    resourceName\n    ):\n    url = baseUrl + "v1/media/{+resourceName}"\n    method = "GET"\n    queryParams = {\n        \n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format(resourceName) + (query if len(query) > 1 else ""),\n        {},\n        None\n    )']

['reportTypes', '__generated', 'from pygogol.core import Request\nfrom json import dumps\nfrom urllib.parse import quote\nfrom pygogol.apis.youtubereporting.v1.Defs import baseUrl\n\ndef list(\n    includeSystemManaged=None,\n    onBehalfOfContentOwner=None,\n    pageSize=None,\n    pageToken=None\n    ):\n    url = baseUrl + "v1/reportTypes"\n    method = "GET"\n    queryParams = {\n        "includeSystemManaged": includeSystemManaged, \n        "onBehalfOfContentOwner": onBehalfOfContentOwner, \n        "pageSize": pageSize, \n        "pageToken": pageToken\n    }\n    queryParams = {k: quote(v) for k, v in queryParams.items() if v is not None}\n    query = "?" + "&".join(map(lambda x: "{}={}".format(x, queryParams[x]), queryParams.keys()))\n    return Request(\n        method,\n        url.format() + (query if len(query) > 1 else ""),\n        {},\n        None\n    )']

['defs', 'baseUrl = "https://youtubereporting.googleapis.com/"\n\nSCOPE_YT_ANALYTICS_MONETARY_READONLY = "https://www.googleapis.com/auth/yt-analytics-monetary.readonly"\nSCOPE_YT_ANALYTICS_READONLY = "https://www.googleapis.com/auth/yt-analytics.readonly"']